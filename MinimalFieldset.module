<?php namespace ProcessWire;

/**
 *
 * Minimal Fieldset
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class MinimalFieldset extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Minimal Fieldset',
			'version' => '0.1.5',
			'summary' => 'Adds a config option to fieldsets to render them without label or padding in Page Edit. Requires AdminThemeUikit.',
			'author' => 'Robin Sallis',
			'icon' => 'square-o',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.0, AdminThemeUikit'
		);
	}

	/**
	 * Init
	 */
	public function init() {
		$this->addHookAfter('FieldtypeFieldsetOpen::getConfigInputfields', $this, 'addConfigInputfields');
		$this->addHookAfter('FieldtypeFieldsetPage::getConfigInputfields', $this, 'addConfigInputfields');
		$this->addHookAfter('Field(type=FieldtypeFieldsetOpen|FieldtypeFieldsetGroup|FieldtypeFieldsetPage)::getInputfield', $this, 'modifyInputfield');
	}

	/**
	 * Add config inputfields
	 *
	 * @param HookEvent $event
	 */
	protected function addConfigInputfields(HookEvent $event) {
		$field = $event->arguments(0);
		$wrapper = $event->return;

		// Not for FieldsetClose
		if($field->type == 'FieldtypeFieldsetClose') return;
		// Not for FieldsetTab
		if($field->type == 'FieldtypeFieldsetTabOpen') return;

		// Show warning if AdminThemeUikit not in use
		$admin_theme = $this->user->admin_theme ?: $this->config->defaultAdminTheme;
		if($admin_theme !== 'AdminThemeUikit') {
			$this->warning($this->_('Minimal Fieldset cannot be used because it requires AdminThemeUikit.'));
			return;
		}

		// Add activation checkbox
		/* @var InputfieldCheckbox $f */
		$f = $this->wire()->modules->get('InputfieldCheckbox');
		$f_name = 'minimal';
		$f->name = $f_name;
		$f->label = $this->_('Remove label and padding for this fieldset');
		$f->attr('checked', $field->$f_name === 1 ? 'checked' : '');
		// Use showIf in the case of FieldsetGroup
		if($field->useTabs !== null) {
			$f->showIf = 'useTabs=0';
		}
		$f->columnWidth = 50;
		$wrapper->add($f);

		// Add no spacing checkbox
		$f = $this->wire()->modules->get('InputfieldCheckbox');
		$f_name = 'no_spacing';
		$f->name = $f_name;
		$f->label = $this->_('Do not distribute vertical space within fieldset');
		$f->attr('checked', $field->$f_name === 1 ? 'checked' : '');
		$f->showIf = 'minimal=1';
		$f->columnWidth = 50;
		$wrapper->add($f);
	}

	/**
	 * Add class to fieldset inputfield and add CSS
	 *
	 * @param HookEvent $event
	 */
	protected function modifyInputfield(HookEvent $event) {
		$field = $event->object;
		$inputfield = $event->return;

		// Only for AdminThemeUikit
		$admin_theme = $this->user->admin_theme ?: $this->config->defaultAdminTheme;
		if($admin_theme !== 'AdminThemeUikit') return;

		// In the case of FieldsetGroup, only for the normal fieldset type
		if($field->useTabs && $field->useTabs !== 0) return;
		// Only if minimal option is selected
		if(!$field->minimal) return;

		// Add classes to inputfield
		$inputfield->wrapClass .= ' MinimalFieldset';
		if(!$field->no_spacing) $inputfield->wrapClass .= ' MinimalFieldsetSpaced';

		// Load stylesheet
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->styles->add($config->urls->$this . "{$this}.css?v=$version");
	}

	/**
	 * Install
	 */
	public function ___install() {
		// Show warning if AdminThemeUikit not in use
		$admin_theme = $this->user->admin_theme ?: $this->config->defaultAdminTheme;
		if($admin_theme !== 'AdminThemeUikit') {
			$this->warning($this->_('Minimal Fieldset cannot be used because it requires AdminThemeUikit.'));
		}
	}

}
